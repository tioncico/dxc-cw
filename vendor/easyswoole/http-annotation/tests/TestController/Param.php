<?php

namespace EasySwoole\HttpAnnotation\Tests\TestController;


use EasySwoole\HttpAnnotation\AnnotationController;
use EasySwoole\HttpAnnotation\AnnotationTag\ApiAuth;
use EasySwoole\HttpAnnotation\AnnotationTag\ApiGroupAuth;
use EasySwoole\HttpAnnotation\Exception\Annotation\ParamValidateError;

/**
 * Class Param
 * @package EasySwoole\HttpAnnotation\Tests\TestController
 * @ApiGroupAuth(name="groupAuth",required="",notEmpty="")
 * @\EasySwoole\HttpAnnotation\AnnotationTag\Param(name="groupParam",required="",notEmpty="")
 */
class Param extends AnnotationController
{
    /**
     * @ApiAuth(name="onRequestAuth",required="",notEmpty="")
     * @\EasySwoole\HttpAnnotation\AnnotationTag\Param(name="onRequestParam",required="",notEmpty="")
     */
    public function onRequest(?string $action): ?bool
    {
        return parent::onRequest($action); // TODO: Change the autogenerated stub
    }

    /**
     * @ApiAuth(name="auth",required="",notEmpty="")
     * @\EasySwoole\HttpAnnotation\AnnotationTag\Param(name="param",required="",notEmpty="")
     */
    public function index()
    {
        $this->response()->write(json_encode($this->request()->getQueryParams()));
    }

    /**
     * @\EasySwoole\HttpAnnotation\AnnotationTag\Param(name="foo",lessThanWithColumn="bar")
     */
    public function lessThanWithColumn()
    {

    }

    /**
     * @\EasySwoole\HttpAnnotation\AnnotationTag\Param(name="foo",greaterThanWithColumn="bar")
     */
    public function greaterThanWithColumn()
    {

    }

    protected function onException(\Throwable $throwable): void
    {
        if ($throwable instanceof ParamValidateError) {
            $validate = $throwable->getValidate();
            $rule = $validate->getError()->getErrorRule();
            if (in_array($rule, ['lessThanWithColumn', 'greaterThanWithColumn',])) {
                throw new \Exception($validate->getError()->__toString());
            }
        }
        parent::onException($throwable); // TODO: Change the autogenerated stub
    }
}
