<?php
/**
 * Created by PhpStorm.
 * User: Tioncico
 * Date: 2019/11/18 0018
 * Time: 15:02
 */

namespace EasySwoole\Oss\Tests\AliYun;

use EasySwoole\Oss\AliYun\Model\WebsiteConfig;
use EasySwoole\Oss\AliYun\OssConst;
use PHPUnit\Framework\TestCase;

class BucketTest extends AliYunBaseTestCase
{
    protected $bucketName = 'tioncicoxyz';

    function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->addTestBucketName();
    }

    protected function addTestBucketName(){
        $bucketName = $this->bucketName;
//        $data = $this->ossClient->doesBucketExist($bucketName);
        $data = $this->client->doesBucketExist($bucketName);
        if ($data === false) {
           $data =  $this->client->createBucket($bucketName);
        }
    }

    function testListBuckets()
    {
        $data = $this->client->listBuckets();
//        $data2 = $this->ossClient->listBuckets();
        $this->assertTrue(!!$data);
    }

    function testCreateBucket()
    {
//        $bucketName = 'tioncicotest';
//        $data = $this->ossClient->createBucket($bucketName);
//        $data = $this->ossClient->deleteBucket($bucketName);
        $bucketName = 'tioncicotest111122';
        $data = $this->client->createBucket($bucketName);
        $this->assertEquals('/' . $bucketName, $data['location']);
        $data = $this->client->deleteBucket($bucketName);
        $this->assertIsArray($data);
    }

    function testDoesBucketExist()
    {
        $bucketName = 'tioncicotest111122';
//        $data = $this->ossClient->doesBucketExist($bucketName);
        $data = $this->client->doesBucketExist($bucketName);
        if ($data === false) {
            $this->testCreateBucket();
        } else {
            $data = $this->client->deleteBucket($bucketName);
            $this->assertIsArray($data);
        }
    }

    function testGetBucketLocation()
    {
        $bucketName = $this->bucketName;
        $data = $this->client->getBucketLocation($bucketName);
        $this->assertTrue(!!$data);
    }

    function testGetBucketMeta()
    {
        $bucketName = $this->bucketName;
        $data = $this->client->getBucketMeta($bucketName);
        $this->assertTrue(!!$data);
//        var_dump($data);
//        $data = $this->ossClient->getBucketMeta($bucketName);
//        var_dump($data);
    }

    function testGetBucketAcl()
    {
        $bucketName = $this->bucketName;
        $data = $this->client->getBucketAcl($bucketName);
        $this->assertTrue(!!$data);
    }

    function testPutBucketAcl(){
        $bucketName = $this->bucketName;
        $data = $this->client->putBucketAcl($bucketName,OssConst::OSS_ACL_TYPE_PUBLIC_READ_WRITE);
        $this->assertTrue(!!$data);
    }



    function testPutBucketLogging(){
        $bucketName = $this->bucketName;
        $data = $this->client->putBucketLogging($bucketName,$bucketName,'test');
        $this->assertTrue(!!$data);
    }

    function testGetBucketLogging(){
        $bucketName = $this->bucketName;
        $data = $this->client->getBucketLogging($bucketName);
        $this->assertTrue(!!$data);
    }

    function testDeleteBucketLogging(){
        $bucketName = $this->bucketName;
        $data = $this->client->deleteBucketLogging($bucketName);
        $this->assertTrue(!!$data);
    }


    function testPutBucketWebsite(){
        $bucketName = $this->bucketName;
        $websiteConfig = new WebsiteConfig("index.html", "error.html");
        $data = $this->client->putBucketWebsite($bucketName,$websiteConfig);
        $this->assertTrue(!!$data);
    }

    function testGetBucketWebsite(){
        $bucketName = $this->bucketName;
        $data = $this->client->getBucketWebsite($bucketName);
        $this->assertTrue(!!$data);
    }

    function testDeleteBucketWebsite(){
        $bucketName = $this->bucketName;
        $data = $this->client->deleteBucketWebsite($bucketName);
        $this->assertTrue(!!$data);
    }

}